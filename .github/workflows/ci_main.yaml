name: CI for Production Branch
on: 
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9"]

    
    steps:
      - name: Clone repo
        uses: actions/checkout@v4.2.0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Display Python version
        run: python -c "import sys; print(sys.version)"

      - name: Set up Kaggle API credentials
        run: |
          mkdir -p ~/.kaggle
          echo "{\"username\":\"${{ secrets.KAGGLE_USERNAME }}\",\"key\":\"${{ secrets.KAGGLE_KEY }}\"}" > ~/.kaggle/kaggle.json
          chmod 600 ~/.kaggle/kaggle.json
      
      - name: Install Poetry
        run: pip install poetry

      - name: Install asltk project dependecies
        run: poetry install

      - name: Run code formatting check
        run: poetry run task lint-check

      - name: Run project tests
        run: poetry run task test --cov-report=xml --ignore-glob='./asltk/scripts/*.py'

      - name: Show-up test coverage (codecov)
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true

  windows:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: ["3.9"]
    
    steps:
      - name: Clone repo
        uses: actions/checkout@v4.2.0


      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Display Python version
        run: python -c "import sys; print(sys.version)"

      - name: Set up Kaggle API credentials
        run: |
          if (-not (Test-Path "$env:USERPROFILE\.kaggle")) { New-Item -Path "$env:USERPROFILE\.kaggle" -ItemType Directory }
          '{"username":"${{ secrets.KAGGLE_USERNAME }}","key":"${{ secrets.KAGGLE_KEY }}"}' | Out-File -FilePath "$env:USERPROFILE\.kaggle\kaggle.json" -Encoding ascii
          icacls "$env:USERPROFILE\.kaggle\kaggle.json" /grant:r "$env:USERNAME:(R,W)" /inheritance:r
        shell: pwsh

      - name: Install Poetry
        run: pip install poetry

      - name: Install asltk project dependecies
        run: poetry install

      - name: Run code formatting check
        run: poetry run task lint-check

      - name: Run project tests
        run: poetry run task test --cov-report=xml --ignore-glob='./asltk/scripts/*.py'

      - name: Show-up test coverage (codecov)
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true

  mac:
    runs-on: macos-latest
    strategy:
      matrix:
        python-version: ["3.9"]
    
    steps:
      - name: Clone repo
        uses: actions/checkout@v4.2.0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}  

      - name: Display Python version
        run: python -c "import sys; print(sys.version)"

      - name: Set up Kaggle API credentials
        run: |
          mkdir -p ~/.kaggle
          echo "{\"username\":\"${{ secrets.KAGGLE_USERNAME }}\",\"key\":\"${{ secrets.KAGGLE_KEY }}\"}" > ~/.kaggle/kaggle.json
          chmod 600 ~/.kaggle/kaggle.json

      - name: Install Poetry
        run: pip install poetry

      - name: Install asltk project dependecies
        run: poetry install

      - name: Run code formatting check
        run: poetry run task lint-check

      - name: Run project tests
        run: poetry run task test --cov-report=xml --ignore-glob='./asltk/scripts/*.py'

      - name: Show-up test coverage (codecov)
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true
